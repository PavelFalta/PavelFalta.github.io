/* tslint:disable */
/* eslint-disable */
/**
 * Todo App API
 * API for managing users and their todos. Now with WebSockets!
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoardInvitation,
  BoardMembership,
  HTTPValidationError,
} from '../models/index';
import {
    BoardInvitationFromJSON,
    BoardInvitationToJSON,
    BoardMembershipFromJSON,
    BoardMembershipToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface AcceptBoardInvitationApiInvitationsInvitationIdAcceptPostRequest {
    invitationId: number;
}

export interface DeclineBoardInvitationApiInvitationsInvitationIdDeclinePostRequest {
    invitationId: number;
}

export interface RevokeBoardInvitationApiInvitationsInvitationIdDeleteRequest {
    invitationId: number;
}

/**
 * 
 */
export class InvitationsApi extends runtime.BaseAPI {

    /**
     * Accept a pending board invitation.
     * Accept Board Invitation
     */
    async acceptBoardInvitationApiInvitationsInvitationIdAcceptPostRaw(requestParameters: AcceptBoardInvitationApiInvitationsInvitationIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardMembership>> {
        if (requestParameters['invitationId'] == null) {
            throw new runtime.RequiredError(
                'invitationId',
                'Required parameter "invitationId" was null or undefined when calling acceptBoardInvitationApiInvitationsInvitationIdAcceptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/invitations/{invitation_id}/accept`.replace(`{${"invitation_id"}}`, encodeURIComponent(String(requestParameters['invitationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardMembershipFromJSON(jsonValue));
    }

    /**
     * Accept a pending board invitation.
     * Accept Board Invitation
     */
    async acceptBoardInvitationApiInvitationsInvitationIdAcceptPost(requestParameters: AcceptBoardInvitationApiInvitationsInvitationIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardMembership> {
        const response = await this.acceptBoardInvitationApiInvitationsInvitationIdAcceptPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Decline a pending board invitation.
     * Decline Board Invitation
     */
    async declineBoardInvitationApiInvitationsInvitationIdDeclinePostRaw(requestParameters: DeclineBoardInvitationApiInvitationsInvitationIdDeclinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardInvitation>> {
        if (requestParameters['invitationId'] == null) {
            throw new runtime.RequiredError(
                'invitationId',
                'Required parameter "invitationId" was null or undefined when calling declineBoardInvitationApiInvitationsInvitationIdDeclinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/invitations/{invitation_id}/decline`.replace(`{${"invitation_id"}}`, encodeURIComponent(String(requestParameters['invitationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardInvitationFromJSON(jsonValue));
    }

    /**
     * Decline a pending board invitation.
     * Decline Board Invitation
     */
    async declineBoardInvitationApiInvitationsInvitationIdDeclinePost(requestParameters: DeclineBoardInvitationApiInvitationsInvitationIdDeclinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardInvitation> {
        const response = await this.declineBoardInvitationApiInvitationsInvitationIdDeclinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get pending board invitations for the current user.
     * Get My Pending Invitations
     */
    async getMyPendingInvitationsApiUsersMeInvitationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BoardInvitation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/users/me/invitations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BoardInvitationFromJSON));
    }

    /**
     * Get pending board invitations for the current user.
     * Get My Pending Invitations
     */
    async getMyPendingInvitationsApiUsersMeInvitationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BoardInvitation>> {
        const response = await this.getMyPendingInvitationsApiUsersMeInvitationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Revoke a pending board invitation (by inviter or board owner).
     * Revoke Board Invitation
     */
    async revokeBoardInvitationApiInvitationsInvitationIdDeleteRaw(requestParameters: RevokeBoardInvitationApiInvitationsInvitationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['invitationId'] == null) {
            throw new runtime.RequiredError(
                'invitationId',
                'Required parameter "invitationId" was null or undefined when calling revokeBoardInvitationApiInvitationsInvitationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/invitations/{invitation_id}`.replace(`{${"invitation_id"}}`, encodeURIComponent(String(requestParameters['invitationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke a pending board invitation (by inviter or board owner).
     * Revoke Board Invitation
     */
    async revokeBoardInvitationApiInvitationsInvitationIdDelete(requestParameters: RevokeBoardInvitationApiInvitationsInvitationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeBoardInvitationApiInvitationsInvitationIdDeleteRaw(requestParameters, initOverrides);
    }

}
