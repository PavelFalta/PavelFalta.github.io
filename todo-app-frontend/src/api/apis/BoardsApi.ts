/* tslint:disable */
/* eslint-disable */
/**
 * Todo App API
 * API for managing users and their todos. Now with WebSockets!
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Board,
  BoardCreate,
  BoardInvitation,
  BoardInvitationCreate,
  BoardMembership,
  BoardMembershipUpdate,
  BoardUpdate,
  HTTPValidationError,
} from '../models/index';
import {
    BoardFromJSON,
    BoardToJSON,
    BoardCreateFromJSON,
    BoardCreateToJSON,
    BoardInvitationFromJSON,
    BoardInvitationToJSON,
    BoardInvitationCreateFromJSON,
    BoardInvitationCreateToJSON,
    BoardMembershipFromJSON,
    BoardMembershipToJSON,
    BoardMembershipUpdateFromJSON,
    BoardMembershipUpdateToJSON,
    BoardUpdateFromJSON,
    BoardUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateNewBoardApiBoardsPostRequest {
    boardCreate: BoardCreate;
}

export interface DeleteSpecificBoardApiBoardsBoardIdDeleteRequest {
    boardId: number;
}

export interface GetSpecificBoardApiBoardsBoardIdGetRequest {
    boardId: number;
}

export interface InviteMemberToBoardApiBoardsBoardIdMembersPostRequest {
    boardId: number;
    boardInvitationCreate: BoardInvitationCreate;
}

export interface ListBoardMembersApiBoardsBoardIdMembersGetRequest {
    boardId: number;
}

export interface ListUserBoardsApiBoardsGetRequest {
    skip?: number;
    limit?: number;
}

export interface RemoveMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDeleteRequest {
    boardId: number;
    userIdToRemove: number;
}

export interface UpdateBoardDetailsApiBoardsBoardIdPutRequest {
    boardId: number;
    boardUpdate: BoardUpdate;
}

export interface UpdateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPutRequest {
    boardId: number;
    userIdToModify: number;
    boardMembershipUpdate: BoardMembershipUpdate;
}

/**
 * 
 */
export class BoardsApi extends runtime.BaseAPI {

    /**
     * Create a new board. The creator becomes the owner.
     * Create New Board
     */
    async createNewBoardApiBoardsPostRaw(requestParameters: CreateNewBoardApiBoardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Board>> {
        if (requestParameters['boardCreate'] == null) {
            throw new runtime.RequiredError(
                'boardCreate',
                'Required parameter "boardCreate" was null or undefined when calling createNewBoardApiBoardsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardCreateToJSON(requestParameters['boardCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardFromJSON(jsonValue));
    }

    /**
     * Create a new board. The creator becomes the owner.
     * Create New Board
     */
    async createNewBoardApiBoardsPost(requestParameters: CreateNewBoardApiBoardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Board> {
        const response = await this.createNewBoardApiBoardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a board. User must be the owner.
     * Delete Specific Board
     */
    async deleteSpecificBoardApiBoardsBoardIdDeleteRaw(requestParameters: DeleteSpecificBoardApiBoardsBoardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling deleteSpecificBoardApiBoardsBoardIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a board. User must be the owner.
     * Delete Specific Board
     */
    async deleteSpecificBoardApiBoardsBoardIdDelete(requestParameters: DeleteSpecificBoardApiBoardsBoardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSpecificBoardApiBoardsBoardIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get details of a specific board. User must be at least a viewer.
     * Get Specific Board
     */
    async getSpecificBoardApiBoardsBoardIdGetRaw(requestParameters: GetSpecificBoardApiBoardsBoardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Board>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling getSpecificBoardApiBoardsBoardIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardFromJSON(jsonValue));
    }

    /**
     * Get details of a specific board. User must be at least a viewer.
     * Get Specific Board
     */
    async getSpecificBoardApiBoardsBoardIdGet(requestParameters: GetSpecificBoardApiBoardsBoardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Board> {
        const response = await this.getSpecificBoardApiBoardsBoardIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invite a user (by email) to a board. Performing user must be an editor or owner.
     * Invite Member To Board
     */
    async inviteMemberToBoardApiBoardsBoardIdMembersPostRaw(requestParameters: InviteMemberToBoardApiBoardsBoardIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardInvitation>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling inviteMemberToBoardApiBoardsBoardIdMembersPost().'
            );
        }

        if (requestParameters['boardInvitationCreate'] == null) {
            throw new runtime.RequiredError(
                'boardInvitationCreate',
                'Required parameter "boardInvitationCreate" was null or undefined when calling inviteMemberToBoardApiBoardsBoardIdMembersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/members`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardInvitationCreateToJSON(requestParameters['boardInvitationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardInvitationFromJSON(jsonValue));
    }

    /**
     * Invite a user (by email) to a board. Performing user must be an editor or owner.
     * Invite Member To Board
     */
    async inviteMemberToBoardApiBoardsBoardIdMembersPost(requestParameters: InviteMemberToBoardApiBoardsBoardIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardInvitation> {
        const response = await this.inviteMemberToBoardApiBoardsBoardIdMembersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all members of a specific board. User must be at least a viewer.
     * List Board Members
     */
    async listBoardMembersApiBoardsBoardIdMembersGetRaw(requestParameters: ListBoardMembersApiBoardsBoardIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BoardMembership>>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling listBoardMembersApiBoardsBoardIdMembersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/members`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BoardMembershipFromJSON));
    }

    /**
     * List all members of a specific board. User must be at least a viewer.
     * List Board Members
     */
    async listBoardMembersApiBoardsBoardIdMembersGet(requestParameters: ListBoardMembersApiBoardsBoardIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BoardMembership>> {
        const response = await this.listBoardMembersApiBoardsBoardIdMembersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all boards the current user is a member of.
     * List User Boards
     */
    async listUserBoardsApiBoardsGetRaw(requestParameters: ListUserBoardsApiBoardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Board>>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BoardFromJSON));
    }

    /**
     * List all boards the current user is a member of.
     * List User Boards
     */
    async listUserBoardsApiBoardsGet(requestParameters: ListUserBoardsApiBoardsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Board>> {
        const response = await this.listUserBoardsApiBoardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from a board.  Owners can remove anyone (except themselves if they are the primary board owner). Users can remove themselves (leave the board). Editors might be allowed to remove viewers/other editors in future, not currently implemented here.
     * Remove Member From Board
     */
    async removeMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDeleteRaw(requestParameters: RemoveMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling removeMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDelete().'
            );
        }

        if (requestParameters['userIdToRemove'] == null) {
            throw new runtime.RequiredError(
                'userIdToRemove',
                'Required parameter "userIdToRemove" was null or undefined when calling removeMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/members/{user_id_to_remove}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))).replace(`{${"user_id_to_remove"}}`, encodeURIComponent(String(requestParameters['userIdToRemove']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a user from a board.  Owners can remove anyone (except themselves if they are the primary board owner). Users can remove themselves (leave the board). Editors might be allowed to remove viewers/other editors in future, not currently implemented here.
     * Remove Member From Board
     */
    async removeMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDelete(requestParameters: RemoveMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeMemberFromBoardApiBoardsBoardIdMembersUserIdToRemoveDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update a board\'s details (e.g., name). User must be the owner.
     * Update Board Details
     */
    async updateBoardDetailsApiBoardsBoardIdPutRaw(requestParameters: UpdateBoardDetailsApiBoardsBoardIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Board>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling updateBoardDetailsApiBoardsBoardIdPut().'
            );
        }

        if (requestParameters['boardUpdate'] == null) {
            throw new runtime.RequiredError(
                'boardUpdate',
                'Required parameter "boardUpdate" was null or undefined when calling updateBoardDetailsApiBoardsBoardIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BoardUpdateToJSON(requestParameters['boardUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardFromJSON(jsonValue));
    }

    /**
     * Update a board\'s details (e.g., name). User must be the owner.
     * Update Board Details
     */
    async updateBoardDetailsApiBoardsBoardIdPut(requestParameters: UpdateBoardDetailsApiBoardsBoardIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Board> {
        const response = await this.updateBoardDetailsApiBoardsBoardIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a user\'s role on a board. Performing user must be the owner.
     * Update Member Role
     */
    async updateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPutRaw(requestParameters: UpdateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardMembership>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling updateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPut().'
            );
        }

        if (requestParameters['userIdToModify'] == null) {
            throw new runtime.RequiredError(
                'userIdToModify',
                'Required parameter "userIdToModify" was null or undefined when calling updateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPut().'
            );
        }

        if (requestParameters['boardMembershipUpdate'] == null) {
            throw new runtime.RequiredError(
                'boardMembershipUpdate',
                'Required parameter "boardMembershipUpdate" was null or undefined when calling updateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/members/{user_id_to_modify}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))).replace(`{${"user_id_to_modify"}}`, encodeURIComponent(String(requestParameters['userIdToModify']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BoardMembershipUpdateToJSON(requestParameters['boardMembershipUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardMembershipFromJSON(jsonValue));
    }

    /**
     * Update a user\'s role on a board. Performing user must be the owner.
     * Update Member Role
     */
    async updateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPut(requestParameters: UpdateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardMembership> {
        const response = await this.updateMemberRoleApiBoardsBoardIdMembersUserIdToModifyPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
