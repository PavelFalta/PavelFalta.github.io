/* tslint:disable */
/* eslint-disable */
/**
 * Todo App API
 * API for managing users and their todos. Now with WebSockets!
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
    RoleToJSONTyped,
} from './Role';
import type { InvitationStatus } from './InvitationStatus';
import {
    InvitationStatusFromJSON,
    InvitationStatusFromJSONTyped,
    InvitationStatusToJSON,
    InvitationStatusToJSONTyped,
} from './InvitationStatus';
import type { Board } from './Board';
import {
    BoardFromJSON,
    BoardFromJSONTyped,
    BoardToJSON,
    BoardToJSONTyped,
} from './Board';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface BoardInvitation
 */
export interface BoardInvitation {
    /**
     * 
     * @type {number}
     * @memberof BoardInvitation
     */
    boardId: number;
    /**
     * 
     * @type {string}
     * @memberof BoardInvitation
     */
    invitedUserEmail: string;
    /**
     * 
     * @type {number}
     * @memberof BoardInvitation
     */
    invitedByUserId: number;
    /**
     * 
     * @type {Role}
     * @memberof BoardInvitation
     */
    role: Role;
    /**
     * 
     * @type {InvitationStatus}
     * @memberof BoardInvitation
     */
    status: InvitationStatus;
    /**
     * 
     * @type {number}
     * @memberof BoardInvitation
     */
    invitedUserId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BoardInvitation
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof BoardInvitation
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof BoardInvitation
     */
    updatedAt?: Date | null;
    /**
     * 
     * @type {User}
     * @memberof BoardInvitation
     */
    inviter?: User | null;
    /**
     * 
     * @type {Board}
     * @memberof BoardInvitation
     */
    board?: Board | null;
    /**
     * 
     * @type {User}
     * @memberof BoardInvitation
     */
    invitedUser?: User | null;
}



/**
 * Check if a given object implements the BoardInvitation interface.
 */
export function instanceOfBoardInvitation(value: object): value is BoardInvitation {
    if (!('boardId' in value) || value['boardId'] === undefined) return false;
    if (!('invitedUserEmail' in value) || value['invitedUserEmail'] === undefined) return false;
    if (!('invitedByUserId' in value) || value['invitedByUserId'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function BoardInvitationFromJSON(json: any): BoardInvitation {
    return BoardInvitationFromJSONTyped(json, false);
}

export function BoardInvitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): BoardInvitation {
    if (json == null) {
        return json;
    }
    return {
        
        'boardId': json['board_id'],
        'invitedUserEmail': json['invited_user_email'],
        'invitedByUserId': json['invited_by_user_id'],
        'role': RoleFromJSON(json['role']),
        'status': InvitationStatusFromJSON(json['status']),
        'invitedUserId': json['invited_user_id'] == null ? undefined : json['invited_user_id'],
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'inviter': json['inviter'] == null ? undefined : UserFromJSON(json['inviter']),
        'board': json['board'] == null ? undefined : BoardFromJSON(json['board']),
        'invitedUser': json['invited_user'] == null ? undefined : UserFromJSON(json['invited_user']),
    };
}

export function BoardInvitationToJSON(json: any): BoardInvitation {
    return BoardInvitationToJSONTyped(json, false);
}

export function BoardInvitationToJSONTyped(value?: BoardInvitation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'board_id': value['boardId'],
        'invited_user_email': value['invitedUserEmail'],
        'invited_by_user_id': value['invitedByUserId'],
        'role': RoleToJSON(value['role']),
        'status': InvitationStatusToJSON(value['status']),
        'invited_user_id': value['invitedUserId'],
        'id': value['id'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt'] as any).toISOString()),
        'inviter': UserToJSON(value['inviter']),
        'board': BoardToJSON(value['board']),
        'invited_user': UserToJSON(value['invitedUser']),
    };
}

